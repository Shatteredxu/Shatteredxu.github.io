<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>1111</title>
    <url>/2020/02/27/1111/</url>
    <content><![CDATA[<p>la’sasdsasdsad啊</p>
<p>sdasdssdsdssdsd</p>
]]></content>
  </entry>
  <entry>
    <title>最小共因素</title>
    <url>/2017/02/27/%E6%9C%80%E5%B0%8F%E5%85%B1%E5%9B%A0%E7%B4%A0-1/</url>
    <content><![CDATA[<h3 id="第一种方法：暴力枚举法"><a href="#第一种方法：暴力枚举法" class="headerlink" title="第一种方法：暴力枚举法"></a>第一种方法：暴力枚举法</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 给定两个数求算法的最大公约数</span></span><br><span class="line"><span class="comment">// 一：暴力枚举法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getmaxDivisor</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a&lt;b)&#123;</span><br><span class="line">        <span class="keyword">var</span> tmp = b </span><br><span class="line">        b = a </span><br><span class="line">        a = tmp </span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = b ;i&gt;<span class="number">0</span>;i--)&#123;</span><br><span class="line">          <span class="keyword">if</span>(a%i==<span class="number">0</span>&amp;b%i==<span class="number">0</span>)&#123;</span><br><span class="line">               <span class="built_in">console</span>.log(<span class="string">"最大公约数为"</span>,i)</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.time(<span class="string">"暴力枚举法"</span>)</span><br><span class="line">getmaxDivisor(<span class="number">350</span>,<span class="number">15</span>)</span><br><span class="line"><span class="built_in">console</span>.timeEnd(<span class="string">"暴力枚举法"</span>)</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p><img src="/images/%E6%9A%B4%E5%8A%9B%E6%9E%9A%E4%B8%BE%E6%B3%95.png" alt="暴力枚举法"><br>该方法简单，效率比较低，需要把两个数相对较小的那个数到他的最大公约数都遍历一遍，于是就有了第二种方法<br>欧几里得算法（Euclidean algorithm）</p>
<h3 id="第二种方法：辗转相除法（欧几里得算法（Euclidean-algorithm））"><a href="#第二种方法：辗转相除法（欧几里得算法（Euclidean-algorithm））" class="headerlink" title="第二种方法：辗转相除法（欧几里得算法（Euclidean algorithm））"></a>第二种方法：辗转相除法（欧几里得算法（Euclidean algorithm））</h3><pre><code>该算法基于一条定理：两个正整数a,b(a&gt;b),他们的最大公约数等于b与a%b的最大公约数</code></pre><p>   通过这一条定理我们就可以用递归的方法来求最大公约数，当a%b取余为0时  余数就为b<br> <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//二：辗转相除法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getmaxDivisor</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.time(<span class="string">"辗转相除法"</span>)</span><br><span class="line">    <span class="keyword">if</span>(a&lt;b)&#123;</span><br><span class="line">        <span class="keyword">var</span> tmp = b </span><br><span class="line">        b = a </span><br><span class="line">        a = tmp </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(a%b)&#123;</span><br><span class="line">      getmaxDivisor(b,a%b)</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="built_in">console</span>.log(<span class="string">"最大公约数为"</span>,b)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">getmaxDivisor(<span class="number">35</span>,<span class="number">150000</span>)</span><br><span class="line"><span class="built_in">console</span>.timeEnd(<span class="string">'辗转相除法'</span>)</span><br></pre></td></tr></table></figure><br><img src="/images/%E8%BE%97%E8%BD%AC%E7%9B%B8%E9%99%A4%E6%B3%95.png" alt="辗转相除法"><br>辗转相除法的优点：该算法能够较为快速的求解最大公约数。<br>缺点：a对b取模运算性能较低．</p>
<h3 id="第三种方法：更像减损术-出自九章算术"><a href="#第三种方法：更像减损术-出自九章算术" class="headerlink" title="第三种方法：更像减损术(出自九章算术)"></a>第三种方法：更像减损术(出自九章算术)</h3><p>该算法也是使用了递归的思想 将a与b的最大公约数转化为b和a-b的最大公约数 知道a-b=0 则最大公约数为b<br>算法步骤：<br>    第一步：任意给定两个正整数；判断它们是否都是偶数。若是，则用2约简；若不是则执行第二步。<br>    第二步：以较大的数减较小的数，接着把所得的差与较小的数比较，并以大数减小数。继续这个操作，直到所  得的减数和差相等为止。<br>    则第一步中约掉的若干个2与第二步中等数的乘积就是所求的最大公约数。<br>其中所说的“等数”，就是最大公约数。求“等数”的办法是“更相减损”法。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 一：更像减损术</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getmaxDivisor</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a&lt;b)&#123;</span><br><span class="line">        <span class="keyword">var</span> tmp = b </span><br><span class="line">        b = a </span><br><span class="line">        a = tmp </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span></span><br><span class="line">    <span class="keyword">if</span>(a-b)&#123;</span><br><span class="line">      getmaxDivisor(b,a-b)</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="built_in">console</span>.log(<span class="string">"最大公约数为"</span>,b)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.time(<span class="string">"更像减损术"</span>)</span><br><span class="line">getmaxDivisor(<span class="number">35</span>,<span class="number">150000</span>)</span><br><span class="line"><span class="built_in">console</span>.timeEnd(<span class="string">'更像减损术'</span>)</span><br></pre></td></tr></table></figure>
<p><img src="/images/%E6%9B%B4%E7%9B%B8%E5%87%8F%E6%8D%9F%E6%9C%AF.png" alt="更相减损术"><br>但是该算法不稳定，当a与b相差悬殊的时候 ，该算法效率很低。</p>
<h3 id="第四种方法-：更相减损术与移位运算结合"><a href="#第四种方法-：更相减损术与移位运算结合" class="headerlink" title="第四种方法 ：更相减损术与移位运算结合"></a>第四种方法 ：更相减损术与移位运算结合</h3><ol>
<li><p>介绍一下移位运算：<br>&nbsp;&nbsp;&nbsp;&nbsp;在数字没有溢出的前提下，对于正数和负数，左移一位都相当于乘以2的1次方，左移n位就相当于乘以2的n次方；右移一位相当于除2，右移n位相当于除以2的n次方。<br>比如 数字11的二进制形式为 0000 0000 0000 1011 将他左移一位 即11&gt;&gt;1 结果为 0000 0000 0001 0110 ，结果为 2<sup>5</sup>+2<sup>3</sup>+2<sup>2</sup> = 22 ,所以左移n位相当于乘以2<sup>n</sup>  </p>
</li>
<li><p>移位运算为什么快？<br>&nbsp;&nbsp;左移、右移其实是做乘以2或者除以2的过程,但这是利用二进制的基本特点实现的,<br>即小数点左移或右移数据变小或变大二进制的10倍,及十进制的2倍.这个指令在硬件上仅仅需要一步（时钟步）就可以实现.<br>而乘除法实际上是通过多次加减法来实现的,在硬件上需要多步（时钟步）才能实现,这样就需要更多的时间.<br>如果有兴趣,翻一翻<mark>微机原理</mark>中关于每一步指令的执行周期图就能够看出来哪个指令长哪个指令短.<br>所以在通常情况下，移位运算比乘除运算快</p>
</li>
<li><p>接着说怎样将更相减损术和移位运算结合使用<br>&nbsp;&nbsp;&nbsp;&nbsp;九章算术原文中多了一步验证：如果两数都是偶数，计算差值之前会首先让两个数都折半，使得计算次数更少。这种方法做到了部分优化，但古人似乎没想到一奇一偶的情况也是可以优化的。所以一般该算法的步骤为：</p>
<ul>
<li>当a和b均为偶数，gcb(a,b) = 2<em>gcb(a/2, b/2) = 2</em>gcb(a&gt;&gt;1, b&gt;&gt;1)  </li>
<li>当a为偶数，b为奇数，gcb(a,b) = gcb(a/2, b) = gcb(a&gt;&gt;1, b)  </li>
</ul>
<ul>
<li>当a为奇数，b为偶数，gcb(a,b) = gcb(a, b/2) = gcb(a, b&gt;&gt;1) </li>
<li>当a和b均为奇数，利用更相减损术运算一次，gcb(a,b) = gcb(b, a-b)， 此时a-b必然是偶数，又可以继续进行移位运算。<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 一：更像减损术+移位运算</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getmaxDivisor</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a &lt; b) &#123;</span><br><span class="line">        <span class="keyword">var</span> tmp = b</span><br><span class="line">        b = a</span><br><span class="line">        a = tmp</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (a == b) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"最大公约数为"</span>, b)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!(a &amp; <span class="number">1</span>) &amp;&amp; !(b &amp; <span class="number">1</span>)) &#123;</span><br><span class="line">            a = a &gt;&gt; <span class="number">1</span></span><br><span class="line">            b = b &gt;&gt; <span class="number">1</span></span><br><span class="line">            getmaxDivisor(b, a - b)</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!(a &amp; <span class="number">1</span>) &amp; b &amp; <span class="number">1</span>) &#123;</span><br><span class="line">            a = a &gt;&gt; <span class="number">1</span></span><br><span class="line">            getmaxDivisor(b, a - b)</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((a &amp; <span class="number">1</span>) &amp; !b &amp; <span class="number">1</span>) &#123;</span><br><span class="line">            b = b &gt;&gt; <span class="number">1</span></span><br><span class="line">            getmaxDivisor(b, a - b)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            getmaxDivisor(b, a - b)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.time(<span class="string">"更像减损术+移位运算"</span>)</span><br><span class="line">getmaxDivisor(<span class="number">350</span>, <span class="number">15</span>)</span><br><span class="line"><span class="built_in">console</span>.timeEnd(<span class="string">'更像减损术+移位运算'</span>)</span><br></pre></td></tr></table></figure>
<img src="/images/%E6%9B%B4%E5%83%8F%E5%87%8F%E6%8D%9F%E6%9C%AF+%E7%A7%BB%E4%BD%8D%E8%BF%90%E7%AE%97.png" alt="更像减损术+移位运算"><br>上面代码使用了<code>a&1</code>来判断a是否为偶数 相当于 a%2<br>a &amp; 1 是取 X 二进制数 的最低位.X 为偶数,最低位 0,X 为奇数,最低位 1.<br>a%2 – 除法取余数运算,X 为偶数 余数为 0, X 为奇数 余数为 1.<br>所以 表达式 成立.(a&amp;1)==(a%2) 为真.</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
</search>
